@import '../variables.less'; // Можно удалять, это только для удобства написания кода.



//------------------------------------------------------------------------------
//  Модульная сетка (почти как в Bootstrap)
//------------------------------------------------------------------------------


.container-fluid {
  padding-left: (@grid-gutter-width / 2);
  padding-right: (@grid-gutter-width / 2);
}

.container {
  padding-left: (@grid-gutter-width / 2);
  padding-right: (@grid-gutter-width / 2);
  margin-left: auto;
  margin-right: auto;
  width: 100%;

  // @media (min-width: @screen-sm) {
  //   width: 100%;
  // }
  @media (min-width: @screen-md) {
    width: @screen-md;
  }
  @media (min-width: @screen-lg) {
    width: @screen-lg;
  }
  @media (min-width: @screen-xl) {
    width: @screen-xl;
  }
  // @media (min-width: @screen-xxl) {
  //   width: @screen-xxl;
  // }
}

.row {
  .row();
}

.make-grid(xs);
.make-grid(sm);
.make-grid(md);
.make-grid(lg);
.make-grid(xl);
// .make-grid(xxl);

.make-columns(@grid-columns, xs);
.col-xs {
  flex: 1 0 auto;
  width: auto;
  padding-left: (@grid-gutter-width / 2);
  padding-right: (@grid-gutter-width / 2);
}
// .make-offsets(@grid-columns, xs);

@media (min-width: @screen-sm) {
  .make-columns(@grid-columns, sm);
  .col-sm {
    flex: 1 0 auto;
    width: auto;
    padding-left: (@grid-gutter-width / 2);
    padding-right: (@grid-gutter-width / 2);
  }
  // .make-offsets(@grid-columns, sm);
}

@media (min-width: @screen-md) {
  .make-columns(@grid-columns, md);
  .col-md {
    flex: 1 0 auto;
    width: auto;
    padding-left: (@grid-gutter-width / 2);
    padding-right: (@grid-gutter-width / 2);
  }
  // .make-offsets(@grid-columns, md);
}

@media (min-width: @screen-lg) {
  .make-columns(@grid-columns, lg);
  .col-lg {
    flex: 1 0 auto;
    width: auto;
    padding-left: (@grid-gutter-width / 2);
    padding-right: (@grid-gutter-width / 2);
  }
  // .make-offsets(@grid-columns, lg);
}

@media (min-width: @screen-xl) {
  .make-columns(@grid-columns, xl);
  .col-xl {
    flex: 1 0 auto;
    width: auto;
    padding-left: (@grid-gutter-width / 2);
    padding-right: (@grid-gutter-width / 2);
  }
  // .make-offsets(@grid-columns, xl);
}

// @media (min-width: @screen-xxl) {
//   .make-columns(@grid-columns, xxl);
//   .col-xxl {
//     flex: 1 0 auto;
//     width: auto;
//     padding-left: (@grid-gutter-width / 2);
//     padding-right: (@grid-gutter-width / 2);
//   }
//   .make-offsets(@grid-columns, xxl);
// }





//------------------------------------------------------------------------------
//  Служебные примеси, используемые только в этом файле
//------------------------------------------------------------------------------

.make-grid(@screen: xs) {
  .column-list(@index) {
    @item: ~".col-@{screen}-@{index}";
    .column-list((@index + 1), @item);
  }
  .column-list(@index, @list) when (@index =< @grid-columns) {
    @item: ~".col-@{screen}-@{index}";
    .column-list((@index + 1), ~"@{list}, @{item}");
  }
  .column-list(@index, @list) when (@index > @grid-columns) {
    @{list} {
      flex: 0 0 100%;
      width: 100%;
      padding-left: (@grid-gutter-width / 2);
      padding-right: (@grid-gutter-width / 2);
    }
  }
  .column-list(1);
}

.make-columns(@n, @screen, @i: 1) when (@i =< @n) {
  .col-@{screen}-@{i} {
    max-width: (@i * 100% / @n);
    flex-basis: (@i * 100% / @n);
  }
  .make-columns(@n, @screen, (@i + 1));
}

.make-offsets(@n, @screen, @i: 1) when (@i =< @n) {
  .col-@{screen}-offset-@{i} {
    margin-left: (@i * 100% / @n);
  }
  .make-offsets(@n, @screen, (@i + 1));
}
